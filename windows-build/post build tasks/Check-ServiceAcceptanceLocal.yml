---
# Created by Michael Barron 27/03/2019
# Modified by Michael Barron 05/04/2019
# Service Acceptance check that runs on the Target Server

- hosts: all
  tasks:

##################################################################################
###### Check if Backup adapter exists and register backup_required variable ######
##################################################################################

  - name: Check Backup Network Adapter exists
    win_shell: |
      Get-NetAdapter -Name "Backup" –ErrorAction SilentlyContinue
    register: backup_check
    ignore_errors: yes
    check_mode: no

  - name: Register backup_required true if backup NIC exists
    set_fact:
      backup_required: true
    when: backup_check.rc == 0

  - name: Register backup_required false if backup NIC doesnt exists
    set_fact:
      backup_required: false
    when: backup_check.rc != 0

##################################################################################
########## Check RDP and Admin Accounts have been added to the server ############
##################################################################################

  # Work out short domain name from full doamin name and store as fact
  - name: Define short name for EXPERIANUK
    set_fact:
      short_domain: EXPERIANUK
    when: ansible_windows_domain == 'uk.experian.local'

  - name: Define short name for GDC
    set_fact:
      short_domain: GDC
    when: ansible_windows_domain == 'gdc.local'

  - name: Define short name for IPANI
    set_fact:
      short_domain: IPANIUK
    when: ansible_windows_domain == 'ipani.uk.experian.com'

# Work out Admin and RDP Group names from hostname and store as fact
  - name: Define Admin Group Name
    set_fact:
      admin_account: "WS-ADM_{{ ansible_hostname }}"
  
  - name: Define RDP Group Name
    set_fact:
      rdp_account: "WS-STD_{{ ansible_hostname }}"

# Local access groups exist created by Configure Local Group Access role Admin
  - name: Check local Admin Group membership
    win_group_membership:
      name: Administrators
      members:
        - "{{ short_domain }}\\{{ admin_account }}"
      state: present
    register: local_admin_group

# Local access groups exist created by Configure Local Group Access role RDP
  - name: Check local RDP Group membership
    win_group_membership:
      name: Remote Desktop Users
      members:
        - "{{ short_domain }}\\{{ rdp_account }}"
      state: present
    register: local_rdp_group

# Check if the Check local Admin Group membership changed anything
  - name: Check if the Check local Admin Group membership changed anything
    fail:
      msg: "Group Doesnt Exist {{ admin_account }}"
    when: local_admin_group.changed == true

# Check if the Check local Admin Group membership changed anything
  - name: Check if the Check local RDP Group membership changed anything
    fail:
      msg: "Group Doesnt Exist {{ rdp_account }}"
    when: local_rdp_group.changed == true

# Success Debug
  - name: Success Debug
    debug:
      msg: "Both the Admin and RDP groups exist on the server"
    when:
      - local_admin_group.changed == false
      - local_rdp_group.changed == false

##################################################################################
############# Check FireEye is installed when not a Database server ##############
##################################################################################

# Check FireEye is installed if not a Database server block
  - name: Block for executing command only when not Database
    block:

# Gather FireEye Registry version key value
    - name: Gather FireEye version from Registry
      win_reg_stat:
        path: HKLM:\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\{D82800D5-27A8-4FAC-9564-3F700157BA2F}\
        name: DisplayVersion
      register: fireeye_results

# Debug FireEye results var
    - name: Debug FireEye Results var
      debug:
        var: fireeye_results
    
    - name: FireEye Version Check
      debug:
        msg: "Fireeye required Version is {{ fireEye_Version }} installed version is {{ fireeye_results.value }}"
      when:
        - fireeye_results.value == fireEye_Version
        - fireeye_results is defined

    - name: Fail if FireEye is not installed
      fail:
        msg: "FireEye not found or is the incorrect version!"
      when: fireeye_results is undefined or fireeye_results.value != fireEye_Version

# FireEye Block End
    when:
      - server_role != 'Database'

##################################################################################
############# Check that interfaces called Primary and Backup exist ##############
##################################################################################
# "Check that interfaces called Primary and Backup exist"
  
  - name: Check Primary Network Adapter exists
    win_shell: |
      Get-NetAdapter -Name "Primary" –ErrorAction SilentlyContinue
    register: primary_nic
    ignore_errors: yes
    check_mode: no

  - name: Fail if no Primary Network Adapter found
    fail:
      msg: "Primary NIC not found!"
    when: primary_nic.rc != 0

# Backup Required Block
  - name: Block for executing command only when backup required
    block:

    - name: Check Backup Network Adapter exists
      win_shell: |
        Get-NetAdapter -Name "Backup" –ErrorAction SilentlyContinue
      register: backup_nic
      ignore_errors: yes
      check_mode: no

    - name: Fail if no Backup Network Adapter found
      fail:
        msg: "Backup NIC not found!"
      when: backup_nic.rc != 0

# Backup Required Block end
    when: 
      - backup_required

##################################################################################
####################### Checks required accounts exist ###########################
##################################################################################

# Check that CCAdmin Account exists and is a member of Administrators
  - name: Check that CCAdmin Account exists and is a member of Administrators
    win_group_membership:
      name: Administrators
      members:
        - "CCAdmin"
      state: present
    register: CCAdmin_user

# Check if the Check local Admin Group membership changed anything
  - name: Check if the Check CCAdmin changed anything
    fail:
      msg: "User Doesnt Exist CCAdmin"
    when: CCAdmin_user.changed == true

# Check that the Arcsight Account is a member of the event log readers group
  - name: Ensure user Arcsight is present EXPERIANUK Domain
    win_group_membership:
      name: Event Log Readers
      members:
        - "{{ short_domain }}\\arcsight"
      state: present
    register: arcsight_user
    when: "'uk.experian.local' in ansible_domain"

  - name: Ensure user ArcSvc is present GDC.LOCAL Domain
    win_group_membership:
      name: Event Log Readers
      members:
        - "{{ short_domain }}\\arcsvc"
      state: present
    register: arcsight_user
    when: "'gdc' in ansible_domain"

  - name: Ensure user Arcsight is present IPANI.UK.EXPERIAN.COM Domain
    win_group_membership:
      name: Event Log Readers
      members:
        - "{{ short_domain }}\\arcsight"
      state: present
    register: arcsight_user
    when: "'ipani' in ansible_domain"

# Check if the Check Arcsight changed anything
  - name: Check if the Check Arcsight changed anything
    fail:
      msg: "User Doesnt Exist {{ short_domain }}\\Arcsight"
    when: arcsight_user.changed == true

# Check that SS000DA exists and is in administrators group.
  - name: Check that SS000DA Account exists and is a member of Administrators
    win_group_membership:
      name: Administrators
      members:
        - "ss000da"
      state: present
    register: ss000da_user

# Check if the Check SS000DA changed anything
  - name: Check if the Check SS000DA changed anything
    fail:
      msg: "User Doesnt Exist SS000DA"
    when: ss000da_user.changed == true

# GDC Block
  - name: Block for executing when GDC
    block:

# Check that sndlgdc exists and is in administrators group.
    - name: Check that sndlgdc Account exists and is a member of Administrators GDC
      win_group_membership:
        name: Administrators
        members:
          - "{{ short_domain }}\\sndlgdc"
        state: present
      register: sndlgdc_user

# Check if the Check sndlgdc changed anything
    - name: Check if the Check sndlgdc changed anything
      fail:
        msg: "User Doesnt Exist {{ short_domain }}\\sndlgdc"
      when: sndlgdc_user.changed == true

# Check that ADMIN EGOC Operations exists and is in administrators group.
    - name: Check that ADMIN EGOC Operations Account exists and is a member of Administrators GDC
      win_group_membership:
        name: Administrators
        members:
          - "{{ short_domain }}\\ADMIN EGOC Operations"
        state: present
      register: EGOC_OP_user

# Check if the Check ADMIN EGOC Operations changed anything
    - name: Check if the Check ADMIN EGOC Operations changed anything
      fail:
        msg: "UserDoesnt Exist {{ short_domain }}\\ADMIN EGOC Operations"
      when: EGOC_OP_user.changed == true

# Check that ADMIN DSG Engineers exists and is in administrators group.
    - name: Check that ADMIN DSG Engineers Account exists and is a member of Administrators GDC
      win_group_membership:
        name: Administrators
        members:
          - "{{ short_domain }}\\ADMIN DSG Engineers"
        state: present
      register: ADMIN_DSG_user

# Check if the Check ADMIN DSG Engineers changed anything
    - name: Check if the Check ADMIN DSG Engineers changed anything
      fail:
        msg: "User Doesnt Exist {{ short_domain }}\\ADMIN DSG Engineers"
      when: ADMIN_DSG_user.changed == true

# GDC Block End
    when:
      - ansible_windows_domain == 'gdc.local'

# IPANIUK Block
  - name: Block for executing when IPANIUK
    block:

# Check that sndipaniuk exists and is in administrators group.
    - name: Check that sndipaniuk Account exists and is a member of Administrators IPANIUK
      win_group_membership:
        name: Administrators
        members:
          - "{{ short_domain }}\\sndipaniuk"
        state: present
      register: sndipaniuk_user

# Check if the Check sndipaniuk changed anything
    - name: Check if the Check sndipaniuk changed anything
      fail:
        msg: "User Doesnt Exist {{ short_domain }}\\sndipaniuk"
      when: sndipaniuk_user.changed == true

# Check that Domain Admins exists and is in administrators group.
    - name: Check that Domain Admins Account exists and is a member of Administrators IPANIUK
      win_group_membership:
        name: Administrators
        members:
          - "{{ short_domain }}\\Domain Admins"
        state: present
      register: domain_admin_user

# Check if the Check Domain Admins changed anything
    - name: Check if the Check Domain Admins changed anything
      fail:
        msg: "User Doesnt Exist {{ short_domain }}\\Domain Admins"
      when: domain_admin_user.changed == true

# Check that ts command centre all users exists and is in administrators group.
    - name: Check that ts command centre all users Account exists and is a member of Administrators IPANIUK
      win_group_membership:
        name: Administrators
        members:
          - "{{ short_domain }}\\ts command centre all users"
        state: present
      register: command_user

# Check if the Check ts command centre all users changed anything
    - name: Check if the Check ts command centre all users changed anything
      fail:
        msg: "User Doesnt Exist {{ short_domain }}\ts command centre all users"
      when: command_user.changed == true

# Check that ts-t-hs-serverops exists and is in administrators group.
    - name: Check that ts-t-hs-serverops Account exists and is a member of Administrators IPANIUK
      win_group_membership:
        name: Administrators
        members:
          - "{{ short_domain }}\\ts-t-hs-serverops"
        state: present
      register: ts_t_user

# Check if the Check ts-t-hs-serverops changed anything
    - name: Check if the Check ts-t-hs-serverops changed anything IPANIUK
      fail:
        msg: "User Doesnt Exist {{ short_domain }}\\ts-t-hs-serverops"
      when: ts_t_user.changed == true

# IPANIUK Block End
    when:
      - ansible_windows_domain == 'ipani.uk.experian.com'

# EXPERIANUK Block
  - name: Block for executing when EXPERIANUK
    block:

# Check that snduk exists and is in administrators group.
    - name: Check that snduk Account exists and is a member of Administrators EXPERIANUK
      win_group_membership:
        name: Administrators
        members:
          - "{{ short_domain }}\\snduk"
        state: present
      register: snduk_user

# Check if the Check snduk changed anything
    - name: Check if the Check snduk changed anything
      fail:
        msg: "User Doesnt Exist {{ short_domain }}\\snduk"
      when: snduk_user.changed == true

# Check that ts command centre all users exists and is in administrators group.
    - name: Check that ts command centre all users Account exists and is a member of Administrators EXPERIANUK
      win_group_membership:
        name: Administrators
        members:
          - "{{ short_domain }}\\ts command centre all users"
        state: present
      register: command_user

# Check if the Check ts command centre all users changed anything
    - name: Check if the Check ts command centre all users changed anything
      fail:
        msg: "User Doesnt Exist {{ short_domain }}\\ts command centre all users"
      when: command_user.changed == true

# Check that ts-t-hs-serverops exists and is in administrators group.
    - name: Check that ts-t-hs-serverops Account exists and is a member of Administrators EXPERIANUK
      win_group_membership:
        name: Administrators
        members:
          - "{{ short_domain }}\\ts-t-hs-serverops"
        state: present
      register: ts_t_user

# Check if the Check ts-t-hs-serverops changed anything
    - name: Check if the Check ts-t-hs-serverops changed anything
      fail:
        msg: "User Doesnt Exist {{ short_domain }}\\ts-t-hs-serverops"
      when: ts_t_user.changed == true

# Check that tdmukuser exists and is in administrators group.
    - name: Check that tdmukuser Account exists and is a member of Administrators EXPERIANUK
      win_group_membership:
        name: Administrators
        members:
          - "{{ short_domain }}\\tdmukuser"
        state: present
      register: tdmukuser_user

# Check if the Check tdmukuser changed anything
    - name: Check if the Check tdmukuser changed anything EXPERIANUK
      fail:
        msg: "User Doesnt Exist {{ short_domain }}\tdmukuser"
      when: tdmukuser_user.changed == true

# EXPERIANUK Block End
    when:
      - ansible_windows_domain == 'uk.experian.local'

# Check that Domain Admins has been removed from local administrators GDC and EXPRIANUK Only

# EXPERIANUK Block
  - name: Block for executing when EXPERIANUK
    block:

# Check that Domain Admins doesnt exists in administrators
    - name: Check that Domain Admins Account doesnt exists in Administrators EXPERIANUK
      win_group_membership:
        name: Administrators
        members:
          - "{{ short_domain }}\\Domain Admins"
        state: absent
      register: Domain_Admins_user

# Check if the Check Domain Admins changed anything
    - name: Check if the Check Domain Admins changed anything EXPERINAUK
      fail:
        msg: "{{ short_domain }}\\Domain Admins has not been removed from the local administrators group"
      when: Domain_Admins_user.changed == true

# EXPERIANUK Block End
    when:
      - ansible_windows_domain == 'uk.experian.local'

# GDC Block
  - name: Block for executing when GDC
    block:

# Check that Domain_Admins doesnt exists in administrators
    - name: Check that Domain Admins Account doesnt exists in Administrators GDC
      win_group_membership:
        name: Administrators
        members:
          - "{{ short_domain }}\\Domain Admins"
        state: absent
      register: Domain_Admins_user

# Check if the Check Domain Admins changed anything
    - name: Check if the Check Domain Admins changed anything GDC
      fail:
        msg: "{{ short_domain }}\\Domain Admins has not been removed from the local administrators group"
      when: Domain_Admins_user.changed == true

# GDC Block End
    when:
      - ansible_windows_domain == 'gdc.local'

#Check that various groups/users have been removed from local administrators in case server was created in the computers container EXPERIANUK Only

# EXPERIANUK Block
  - name: Block for executing when EXPERIANUK
    block:

# Check that ADMIN Workstation Administration doesnt exists in administrators
    - name: Check that ADMIN Workstation Administration Account doesnt exists in Administrators EXPERIANUK
      win_group_membership:
        name: Administrators
        members:
          - "{{ short_domain }}\\ADMIN Workstation Administration"
        state: absent
      register: Admin_ws_user

# Check if the Check ADMIN Workstation Administration changed anything
    - name: Check if the Check ADMIN Workstation Administration changed anything EXPERIANUK
      fail:
        msg: "{{ short_domain }}\\ADMIN Workstation Administration has not been removed from the local administrators group"
      when: Admin_ws_user.changed == true

# Check that CL-T-DskAdmin doesnt exists in administrators
    - name: Check that CL-T-DskAdmin Account doesnt exists in Administrators EXPERIANUK
      win_group_membership:
        name: Administrators
        members:
          - "{{ short_domain }}\\CL-T-DskAdmin"
        state: absent
      register: DskAdmin_user

# Check if the Check CL-T-DskAdmin changed anything
    - name: Check if the Check CL-T-DskAdmin changed anything EXPERIANUK
      fail:
        msg: "{{ short_domain }}\\CL-T-DskAdmin has not been removed from the local administrators group"
      when: DskAdmin_user.changed == true

# Check that Dept_BN_PCSupport doesnt exists in administrators
    - name: Check that Dept_BN_PCSupport Account doesnt exists in Administrators EXPERIANUK
      win_group_membership:
        name: Administrators
        members:
          - "{{ short_domain }}\\Dept_BN_PCSupport"
        state: absent
      register: PCSupport_user

# Check if the Check Dept_BN_PCSupport changed anything
    - name: Check if the Check Dept_BN_PCSupport changed anything EXPERIANUK
      fail:
        msg: "{{ short_domain }}\\Dept_BN_PCSupport has not been removed from the local administrators group"
      when: PCSupport_user.changed == true

# Check that SSMgmtWKUKSvc doesnt exists in administrators
    - name: Check that SSMgmtWKUKSvc Account doesnt exists in Administrators EXPERIANUK
      win_group_membership:
        name: Administrators
        members:
          - "{{ short_domain }}\\SSMgmtWKUKSvc"
        state: absent
      register: SSMgmtWKUKSvc_user

# Check if the Check SSMgmtWKUKSvc changed anything
    - name: Check if the Check SSMgmtWKUKSvc changed anything EXPERIANUK
      fail:
        msg: "{{ short_domain }}\\SSMgmtWKUKSvc has not been removed from the local administrators group"
      when: SSMgmtWKUKSvc_user.changed == true

# EXPERIANUK Block End
    when:
      - ansible_windows_domain == 'uk.experian.local'

##################################################################################
########################## Checks required Services ##############################
##################################################################################

#Check that Telnet Client feature is installed
  - name: Check Telnet Client
    win_feature:
     name: "Telnet-Client"
     state: present
     restart: no
     include_sub_features: yes
     include_management_tools: yes
    register: telnet_results

  - name: Check if the Check Telnet Client changed anything
    fail:
      msg: "Telnet Client Service has not been installed!"
    when: telnet_results.changed == true

#Check that SNMP Service is installed
  - name: Check SNMP Service
    win_feature:
     name: "SNMP-Service"
     state: present
     restart: no
     include_sub_features: yes
     include_management_tools: yes
    register: snmp_reults

  - name: Check if the Check SNMP Service changed anything
    fail:
      msg: "SNMP Service has not been installed!"
    when: snmp_reults.changed == true

#Check that Windows-Server-Backup feature is installed
  - name: Check Windows-Server-Backup
    win_feature:
     name: "Windows-Server-Backup"
     state: present
     restart: no
     include_sub_features: yes
     include_management_tools: yes
    register: win_backup_results

  - name: Check if the Check Windows-Server-Backup changed anything
    fail:
      msg: "Windows-Server-Backup Service has not been installed!"
    when: win_backup_results.changed == true


##################################################################################
############################ Checks Firewall rules ###############################
##################################################################################
# Remote Desktop

  - name: Check Remote Desktop Firewall Rule group is enabled
    win_shell: |
      (get-netfirewallrule -displaygroup 'Remote Desktop').Enabled -eq 'True'
    register: rd_firewall_rules
    check_mode: no

  - name: Fail if Check Remote Desktop Firewall Rule group not enabled
    fail:
      msg: "Remote Desktop Firewall Rule group not enabled!"
    when: rd_firewall_rules.rc != 0


# File and Printer Sharing

  - name: Check File and Printer Sharing Firewall Rule group is enabled
    win_shell: |
      (get-netfirewallrule -displaygroup 'File and Printer Sharing').Enabled -eq 'True'
    register: fps_firewall_rules
    check_mode: no

  - name: Fail if Check File and Printer Sharing Firewall Rule group not enabled
    fail:
      msg: "File and Printer Sharing Firewall Rule group not enabled!"
    when: fps_firewall_rules.rc != 0


# Remote Service Management

  - name: Check Remote Service Management Firewall Rule group is enabled
    win_shell: |
      (get-netfirewallrule -displaygroup 'Remote Service Management').Enabled -eq 'True'
    register: rsm_firewall_rules
    check_mode: no

  - name: Fail if Check Remote Service Management Firewall Rule group not enabled
    fail:
      msg: "Remote Service Management Firewall Rule group not enabled!"
    when: rsm_firewall_rules.rc != 0

# Performance Logs and Alerts

  - name: Check Performance Logs and Alerts Firewall Rule group is enabled
    win_shell: |
      (get-netfirewallrule -displaygroup 'Performance Logs and Alerts').Enabled -eq 'True'
    register: pla_firewall_rules
    check_mode: no

  - name: Fail if Check Performance Logs and Alerts Firewall Rule group not enabled
    fail:
      msg: "Performance Logs and Alerts Firewall Rule group not enabled!"
    when: pla_firewall_rules.rc != 0

# Remote Event Log Management

  - name: Check Remote Event Log Management Firewall Rule group is enabled
    win_shell: |
      (get-netfirewallrule -displaygroup 'Remote Event Log Management').Enabled -eq 'True'
    register: relm_firewall_rules
    check_mode: no

  - name: Fail if Check Remote Event Log Management Firewall Rule group not enabled
    fail:
      msg: "Remote Event Log Management Firewall Rule group not enabled!"
    when: relm_firewall_rules.rc != 0

# Remote Scheduled Tasks Management

  - name: Check Remote Scheduled Tasks Management Firewall Rule group is enabled
    win_shell: |
      (get-netfirewallrule -displaygroup 'Remote Scheduled Tasks Management').Enabled -eq 'True'
    register: rstm_firewall_rules
    check_mode: no

  - name: Fail if Check Remote Scheduled Tasks Management Firewall Rule group not enabled
    fail:
      msg: "Remote Scheduled Tasks Management Firewall Rule group not enabled!"
    when: rstm_firewall_rules.rc != 0

# Remote Volume Management

  - name: Check Remote Volume Management Firewall Rule group is enabled
    win_shell: |
      (get-netfirewallrule -displaygroup 'Remote Volume Management').Enabled -eq 'True'
    register: rvm_firewall_rules
    check_mode: no

  - name: Fail if Check Remote Volume Management Firewall Rule group not enabled
    fail:
      msg: "Remote Volume Management Firewall Rule group not enabled!"
    when: rvm_firewall_rules.rc != 0

# Windows Firewall Remote Management

  - name: Check Windows Firewall Remote Management Firewall Rule group is enabled
    win_shell: |
      (get-netfirewallrule -displaygroup 'Windows Firewall Remote Management').Enabled -eq 'True'
    register: wfrm_firewall_rules
    check_mode: no

  - name: Fail if Check Windows Firewall Remote Management Firewall Rule group not enabled
    fail:
      msg: "Windows Firewall Remote Management Firewall Rule group not enabled!"
    when: wfrm_firewall_rules.rc != 0

# windows management instrumentation (wmi)

  - name: Check windows management instrumentation (wmi) Firewall Rule group is enabled
    win_shell: |
      (get-netfirewallrule -displaygroup 'windows management instrumentation (wmi)').Enabled -eq 'True'
    register: wmi_firewall_rules
    check_mode: no

  - name: Fail if Check windows management instrumentation (wmi) Firewall Rule group not enabled
    fail:
      msg: "windows management instrumentation (wmi) Firewall Rule group not enabled!"
    when: wmi_firewall_rules.rc != 0

# Com+ Network Access

  - name: Check Com+ Network Access Firewall Rule group is enabled
    win_shell: |
      (get-netfirewallrule -displaygroup 'Com+ Network Access').Enabled -eq 'True'
    register: cna_firewall_rules
    check_mode: no

  - name: Fail if Check windows Com+ Network Access Firewall Rule group not enabled
    fail:
      msg: "windows Com+ Network Access Firewall Rule group not enabled!"
    when: cna_firewall_rules.rc != 0

# Com+ Remote Administration

  - name: Check Com+ Remote Administration Firewall Rule group is enabled
    win_shell: |
      (get-netfirewallrule -displaygroup 'Com+ Remote Administration').Enabled -eq 'True'
    register: cra_firewall_rules
    check_mode: no

  - name: Fail if Check windows Com+ Remote Administration Firewall Rule group not enabled
    fail:
      msg: "windows Com+ Remote Administration Firewall Rule group not enabled!"
    when: cra_firewall_rules.rc != 0

##################################################################################
########## Check for UAC LocalAccountTokenFilterPolicy registry setting ##########
##################################################################################

# Block for UAC LocalAccountTokenFilterPolicy registry if server is 2012
  - name: Block for executing command only when Windows Server 2012
    block:

# Gather for UAC LocalAccountTokenFilterPolicy version key value
    - name: Gather UAC LocalAccountTokenFilterPolicy registry version from Registry
      win_reg_stat:
        path: HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\policies\system\
        name: LocalAccountTokenFilterPolicy
      register: uac_results
    
    - name: UAC LocalAccountTokenFilterPolicy registry Version Check
      debug:
        msg: "UAC LocalAccountTokenFilterPolicy registry setting exists"
      when:
        - uac_results.value == 1
        - uac_results is defined

    - name: Fail if UAC LocalAccountTokenFilterPolicy registry is not installed
      fail:
        msg: "UAC LocalAccountTokenFilterPolicy registry not found or is set wrong!"
      when: uac_results is undefined or uac_results.value == 0

# UAC LocalAccountTokenFilterPolicy Block End
    when:
      - "'2012' in ansible_os_name"

##################################################################################
######################## Check ReceiveSideScaling setting ########################
##################################################################################

# Block to check ReceiveSideScaling is disabled if server is 2012
  - name: Block for executing command only when Windows Server 2012
    block:

# Check ReceiveSideScaling setting 2012
    - name: Check ReceiveSideScaling is disabled 2012
      win_shell: |
        (Get-NetOffloadGlobalSetting).ReceiveSideScaling -eq 'Disabled'
      register: rss_results
      check_mode: no

    - name: UAC LocalAccountTokenFilterPolicy registry Version Check 2012
      debug:
        msg: "UAC LocalAccountTokenFilterPolicy is Disabled"
      when:
        - rss_results.rc == 0
        - rss_results is defined

    - name: Fail if UAC LocalAccountTokenFilterPolicy is enabled 2012
      fail:
        msg: "UAC LocalAccountTokenFilterPolicy is Enabled!"
      when: rss_results is undefined or rss_results.rc == 1

# ReceiveSideScaling 2012 Block End
    when:
      - "'2012' in ansible_os_name"

# Check ReceiveSideScaling registry is enabled if server is 2016
  - name: Block for executing command only when Windows Server 2016
    block:

# Check ReceiveSideScaling setting 2016
    - name: Check ReceiveSideScaling is enabled 2016
      win_shell: |
        (Get-NetOffloadGlobalSetting).ReceiveSideScaling -eq 'Enabled'
      register: rss_results
      check_mode: no

    - name: UAC LocalAccountTokenFilterPolicy registry Version Check 2016
      debug:
        msg: "UAC LocalAccountTokenFilterPolicy is Enabled"
      when:
        - rss_results.rc == 0
        - rss_results is defined

    - name: Fail if UAC LocalAccountTokenFilterPolicy is enabled 2016
      fail:
        msg: "UAC LocalAccountTokenFilterPolicy is Enabled!"
      when: rss_results is undefined or rss_results.rc == 1

# ReceiveSideScaling 2016 Block End
    when:
      - "'2016' in ansible_os_name"

##################################################################################
############ Check that SS000DA account has a non-expiring password ##############
##################################################################################

# Check SS000DA account has an non-expiring password if server is 2012
  - name: Block for executing command only when Windows Server 2012
    block:

    - name: Check that SS000DA account has a non-expiring password
      win_user:
        name: SS000DA
        state: query
      register: ss000da_results
      check_mode: no

# Debug results
    - debug:
        var: ss000da_results

# Fail if SS000DA account has an expiring password
    - name: Fail if SS000DA account has a non-expiring password
      fail:
        msg: "SS000DA Password is set to expire!"
      when: ss000da_results is undefined or ss000da_results.password_never_expires == false

# Debug if SS000DA account has an non-expiring password
    - name: Debug if SS000DA account has an non-expiring password
      debug:
        msg: "SS000DA Password is set to never expire!"
      when: 
        - ss000da_results is defined
        - ss000da_results.password_never_expires == true

# Check SS000DA account has an non-expiring password 2012 Block End
    when:
      - "'2012' in ansible_os_name"

# Check SS000DA account has an expiring password if server is 2016
  - name: Block for executing command only when Windows Server 2016
    block:

    - name: Check that SS000DA account has a non-expiring password
      win_user:
        name: SS000DA
        state: query
      register: ss000da_results
      check_mode: no

# Debug results
    - debug:
        var: ss000da_results

# Fail if SS000DA account has an expiring password 2016
    - name: Fail if SS000DA account has a non-expiring password
      fail:
        msg: "SS000DA Password is set to never expire!"
      when: ss000da_results is undefined or ss000da_results.password_never_expires == true

# Debug if SS000DA account has an non-expiring password 2016
    - name: Debug if SS000DA account has an expiring password
      debug:
        msg: "SS000DA Password is set to expire!"
      when: 
        - ss000da_results is defined
        - ss000da_results.password_never_expires == false

# ReceiveSideScaling 2016 Block End
    when:
      - "'2016' in ansible_os_name"

##################################################################################
################### Check that experian key has been created #####################
##################################################################################

# Block for Check that experian registry key if server is 2012
#  - name: Block for executing command only when Windows Server 2012
#    block:

# Gather for Check that experian registry key value
#    - name: Gather UAC LocalAccountTokenFilterPolicy registry version from Registry
#      win_reg_stat:
#        path: HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\policies\system\
#        name: LocalAccountTokenFilterPolicy
#      register: uac_results
    
#    - name: UAC LocalAccountTokenFilterPolicy registry Version Check
#      debug:
#        msg: "UAC LocalAccountTokenFilterPolicy registry setting exists"
#      when:
#        - uac_results.value == 1
#        - uac_results is defined

#    - name: Fail if UAC LocalAccountTokenFilterPolicy registry is not installed
#      fail:
#        msg: "UAC LocalAccountTokenFilterPolicy registry not found or is set wrong!"
#      when: uac_results is undefined or uac_results.value == 0

# Check that experian registry key Block End 2012
#    when:
#      - "'2012' in ansible_os_name"